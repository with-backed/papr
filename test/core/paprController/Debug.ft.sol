//0xac9650d800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000002e00000000000000000000000000000000000000000000000000000000000000264087ba48c0000000000000000000000001dd5aa4ee9c33da2ed78d493ebc492fadd5193cc0000000000000000000000000593cd2238d1b143bd1c67cd7fa98eee32a260ea000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000001b7cc41720d6ce82b4dfae2b94fe479616c10dde794937250cc524622e79e664870baada04cbfe6247921aca6f82a30818d673d2b014fb4e70cff91c1723427f53e1b359c8612f1bfeeeaa70bee73bb8d0301bb14c833406d3f281a611e1838738000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000638be0c800000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000068b7e050e6e2c7efe11439045c9d49813c1724b8000000000000000000000000000000000000000000000000000000006b87afa400000000000000000000000000000000000000000000000000000000000000417cc41720d6ce82b4dfae2b94fe479616c10dde794937250cc524622e79e664870baada04cbfe6247921aca6f82a30818d673d2b014fb4e70cff91c1723427f531b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064578bcc200000000000000000000000001dd5aa4ee9c33da2ed78d493ebc492fadd5193cc0000000000000000000000000593cd2238d1b143bd1c67cd7fa98eee32a260ea000000000000000000000000000000000000000000000000c249fdd32778000000000000000000000000000000000000000000000000000000000000
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import "forge-std/Test.sol";

import {ERC20} from "solmate/tokens/ERC20.sol";
import {TickMath} from "fullrange/libraries/TickMath.sol";

import {PaprController} from "src/core/PaprController.sol";
import {MainnetForking} from "test/base/MainnetForking.sol";
import {IPaprController} from "src/interfaces/IPaprController.sol";

contract BasePaprControllerTest is MainnetForking {
    address user = 0xcD01A3acED67e266be21117376C7025B384Cd4d7;
    PaprController controller = PaprController(0x3777B4b21489d2F0114E178C0cb2bb7332C8c3BD);

    function setUp() public virtual {
        vm.startPrank(user);
    }

    function testDebug() public {
        bytes memory data = hex"d88998500000000000000000000000009622d9a65e80f48f7d93cb8d41d1a3626cb0949e00000000000000000000000000000000000000000000000000000000000000650000000000000000000000004770646fe8635fa9ed3cb72ed4b7ef6386a0682700000000000000000000000000000000000000000000000009b6e64a8ec6000000000000000000000000000000000000000000000000000000000000000151800000000000000000000000000000000000000000000003cca919c9c891f8eabf000000000000000000000000e93eb054835b73abd7425e01f13b13b539b8b7730000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cd01a3aced67e266be21117376c7025b384cd4d700000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000001b1b0b4aa8cf6352211b2798e9dd453ee7c1d4811735b866b6b64a2cdf08a25f7a1f954fe495f211c9954865cf54682daa36d878a3fcfd86961f55257c7837be511688b82b4cd4cb3b310a99f2c95f15e8c21dd44513c55b907784e0a15b4b8ac4000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000638cbcf800000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000068b7e050e6e2c7efe11439045c9d49813c1724b80000000000000000000000000000000000000000000000000000000161ed11dc00000000000000000000000000000000000000000000000000000000000000411b0b4aa8cf6352211b2798e9dd453ee7c1d4811735b866b6b64a2cdf08a25f7a1f954fe495f211c9954865cf54682daa36d878a3fcfd86961f55257c7837be511b00000000000000000000000000000000000000000000000000000000000000";
        (bool success, bytes memory result) = address(controller).call(data);
        assertTrue(success);
    }
}

