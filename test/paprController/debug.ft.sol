
pragma solidity ^0.8.17;

import "forge-std/Test.sol";

import {ERC20} from "solmate/tokens/ERC20.sol";
import {TickMath} from "fullrange/libraries/TickMath.sol";

import {PaprController} from "src/PaprController.sol";
import {ReservoirOracleUnderwriter} from "src/ReservoirOracleUnderwriter.sol";
import {MainnetForking} from "test/base/MainnetForking.sol";
import {IPaprController} from "src/interfaces/IPaprController.sol";

contract BasePaprControllerTest is MainnetForking {
    address user = 0xbc3ed6B537f2980e66f396Fe14210A56ba3f72C4;
    PaprController controller = PaprController(0x1C262eCA411891F984719EdB9931354846e61756);

    function setUp() public virtual {
        vm.startPrank(user);
    }

    function testDebug() public {
        // emit log_bytes(ReservoirOracleUnderwriter.IncorrectOracleSigner.selector);
        bytes memory data = hex"ac9650d800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000104cf268564000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000593cd2238d1b143bd1c67cd7fa98eee32a260ea00000000000000000000000000000000000000000000000000000000000001b90000000000000000000000000593cd2238d1b143bd1c67cd7fa98eee32a260ea00000000000000000000000000000000000000000000000000000000000001ba0000000000000000000000000593cd2238d1b143bd1c67cd7fa98eee32a260ea00000000000000000000000000000000000000000000000000000000000001bb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000264eef44eb1000000000000000000000000bc3ed6b537f2980e66f396fe14210a56ba3f72c40000000000000000000000000593cd2238d1b143bd1c67cd7fa98eee32a260ea000000000000000000000000000000000000000000000000010a741a4627800000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000001bd6f0ae2e1abd39e02b0df3208d7a30ca954f2a80382105691ccd2a8919b1af1a5614c116d495ec4d543801731fbc541c0779a78791b4313b8552fe342a3fa2a431828560fab22386b5dc4637db55d2cf6224771f55c1b59c2c85924379f2c99400000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000063d81cf700000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000040000000000000000000000000b4fbf271143f4fbf7b91a5ded31805e42b2208d6000000000000000000000000000000000000000000000000016345785d8a00000000000000000000000000000000000000000000000000000000000000000041d6f0ae2e1abd39e02b0df3208d7a30ca954f2a80382105691ccd2a8919b1af1a5614c116d495ec4d543801731fbc541c0779a78791b4313b8552fe342a3fa2a41b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
        (bool success, bytes memory result) = address(controller).call(data);
        assertTrue(success);
    }
}