
pragma solidity ^0.8.17;

import "forge-std/Test.sol";

import {ERC20} from "solmate/tokens/ERC20.sol";
import {TickMath} from "fullrange/libraries/TickMath.sol";

import {PaprController} from "src/PaprController.sol";
import {ReservoirOracleUnderwriter} from "src/ReservoirOracleUnderwriter.sol";
import {MainnetForking} from "test/base/MainnetForking.sol";
import {IPaprController} from "src/interfaces/IPaprController.sol";

contract BasePaprControllerTest is MainnetForking {
    address user = 0xbc3ed6B537f2980e66f396Fe14210A56ba3f72C4;
    PaprController controller = PaprController(0x3b29c19ff2fcEa0Ff98D0ef5B184354D74eA74b0);

    function setUp() public virtual {
        vm.startPrank(user);
    }

    function testDebug() public {
        // emit log_bytes(ReservoirOracleUnderwriter.IncorrectOracleSigner.selector);
        bytes memory data = hex"ac9650d800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000064578bcc20000000000000000000000000bc3ed6b537f2980e66f396fe14210a56ba3f72c4000000000000000000000000ca7ca7bcc765f77339be2d648ba53ce9c8a262bd00000000000000000000000000000000000000000000000000521a6c2cc260000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a494bfdb6e000000000000000000000000bc3ed6b537f2980e66f396fe14210a56ba3f72c4000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000ca7ca7bcc765f77339be2d648ba53ce9c8a262bd00000000000000000000000000000000000000000000000000000000000003300000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000001cee8b2d533559132a7f463044a8163700138d324f08f129b7edd2a0aa97fafdac501a8c9d21da2d587bf2e1f42238006a525f74134b3c6fd961c959eaa7fdcd606d3a59313df94092b141e3e8c5aac3af106fbd2b098de5316905fde3019da04500000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000063e5735c00000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000040000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000012ff8bded91e5040000000000000000000000000000000000000000000000000000000000000041ee8b2d533559132a7f463044a8163700138d324f08f129b7edd2a0aa97fafdac501a8c9d21da2d587bf2e1f42238006a525f74134b3c6fd961c959eaa7fdcd601c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
        (bool success, bytes memory result) = address(controller).call(data);
        assertTrue(success);
    }
}